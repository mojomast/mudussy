import { EventEmitter } from 'events';
import { EventSystem } from '../../core/event';
import { IPersistenceConfig, SaveType, ISaveInfo, ISaveValidationResult, IGameStateSaveData, IQuestProgress, IScheduledEvent, ISaveSystem } from './types';
export declare class GameStateSaveSystem extends EventEmitter implements ISaveSystem {
    private config;
    private eventSystem;
    private logger;
    private savePath;
    private backupPath;
    private globalFlags;
    private factionRelations;
    private questProgress;
    private worldVariables;
    private eventHistory;
    private scheduledEvents;
    constructor(config: IPersistenceConfig, eventSystem: EventSystem, logger?: any);
    save(data: IGameStateSaveData, type: SaveType, description?: string): Promise<string>;
    load(saveId: string): Promise<IGameStateSaveData>;
    saveGameState(saveId: string, description?: string): Promise<string>;
    loadGameState(saveId: string): Promise<void>;
    listSaves(): Promise<ISaveInfo[]>;
    delete(saveId: string): Promise<boolean>;
    validate(saveId: string): Promise<ISaveValidationResult>;
    backup(saveId: string, reason: string): Promise<string>;
    setGlobalFlag(flagName: string, value: any): void;
    getGlobalFlag(flagName: string): any;
    hasGlobalFlag(flagName: string): boolean;
    removeGlobalFlag(flagName: string): void;
    setFactionRelation(factionA: string, factionB: string, relation: number): void;
    getFactionRelation(factionA: string, factionB: string): number;
    updateQuestProgress(questId: string, playerId: string, objective: string, completed: boolean): void;
    getQuestProgress(questId: string, playerId: string): IQuestProgress | undefined;
    setWorldVariable(key: string, value: any): void;
    getWorldVariable(key: string): any;
    addGameEvent(type: string, source: string, data: any): void;
    scheduleEvent(type: string, scheduledTime: Date, data: any, recurring?: boolean, interval?: number): string;
    cancelScheduledEvent(eventId: string): boolean;
    getScheduledEvents(): IScheduledEvent[];
    getExpiredScheduledEvents(): IScheduledEvent[];
    getStatistics(): any;
    getStatus(): any;
    private createSaveMetadata;
    private calculateChecksum;
    private deepClone;
    private validateSaveFile;
    private createBackup;
}
