import { EventSystem } from '../../core/event';
import { IPlayer } from '../persistence/types';
import { IDialogueProvider, IDialogueResponse, IConversationState, IVariableContext, IDialogueCondition, IDialogueAction, IDialogueManager, IDialogueConfig } from './types';
export declare class DialogueManager implements IDialogueManager {
    private providers;
    private activeConversations;
    private config;
    private eventSystem;
    private logger;
    private autoSaveTimer?;
    constructor(eventSystem: EventSystem, logger?: any);
    initialize(config: IDialogueConfig): Promise<void>;
    private createDefaultConfig;
    registerProvider(provider: IDialogueProvider): void;
    unregisterProvider(providerId: string): boolean;
    getProvider(providerId: string): IDialogueProvider | undefined;
    startConversation(player: IPlayer, npcId: string, providerId?: string): Promise<IDialogueResponse>;
    continueConversation(player: IPlayer, npcId: string, input: string, conversationId: string): Promise<IDialogueResponse>;
    endConversation(player: IPlayer, npcId: string, conversationId: string): Promise<void>;
    private endConversationInternal;
    getConversationState(conversationId: string): IConversationState | undefined;
    getPlayerConversations(playerId: string): IConversationState[];
    evaluateCondition(condition: IDialogueCondition, context: IVariableContext): boolean;
    private evaluateVariableCondition;
    private evaluateFlagCondition;
    private evaluateItemCondition;
    private evaluateQuestCondition;
    private evaluateStatCondition;
    private evaluateSkillCondition;
    private evaluateLevelCondition;
    private evaluateTimeCondition;
    private compareValues;
    executeAction(action: IDialogueAction, context: IVariableContext): Promise<void>;
    resolveVariables(text: string, context: IVariableContext): string;
    private getVariableValue;
    private startAutoSave;
    private saveConversations;
    private loadConversations;
    private cleanupInactiveConversations;
    getStatistics(): any;
    shutdown(): Promise<void>;
}
