import { BaseEntity } from './entity';
import { GameEvent } from './event';
import { BasePlugin } from './plugin';
import { TelnetServer } from '../modules/networking';
import { WorldManager } from '../modules/world';
import { SaveManager, PlayerManager } from '../modules/persistence';
import { DialogueManager } from '../modules/dialogue';
export interface IEngineConfig {
    maxEntities: number;
    tickInterval: number;
    enablePlugins: boolean;
    pluginDirectory?: string;
    saveInterval: number;
    logLevel: string;
    enableNetworking: boolean;
    networkHost: string;
    networkPort: number;
    maxConnections: number;
    connectionTimeout: number;
    idleTimeout: number;
    rateLimitWindow: number;
    rateLimitMaxRequests: number;
    enableWorld: boolean;
    worldPath: string;
    defaultRoomId: string;
    maxItemsPerRoom: number;
    maxPlayersPerRoom: number;
    allowRoomCreation: boolean;
    enablePersistence: boolean;
    savePath: string;
    backupPath: string;
    maxBackups: number;
    validateOnLoad: boolean;
    compressionEnabled: boolean;
    migrationEnabled: boolean;
    enableDialogue: boolean;
    dialogueContentPath: string;
    maxConversationsPerPlayer: number;
    conversationTimeoutMinutes: number;
}
export declare class EngineService {
    private container;
    private entityManager;
    private eventSystem;
    private pluginManager;
    private pluginLoader;
    private config;
    private isRunning;
    private tickInterval?;
    private saveInterval?;
    private telnetServer?;
    private worldManager?;
    private saveManager?;
    private dialogueManager?;
    private playerManager?;
    private logger;
    constructor();
    private initializeEngine;
    private initializeNetworking;
    private initializeWorld;
    private initializePersistence;
    private initializeDialogue;
    private setupEventHandlers;
    start(): Promise<void>;
    stop(): Promise<void>;
    private loadPlugins;
    private startGameLoop;
    private gameTick;
    private startAutoSave;
    private saveGameState;
    updateConfig(newConfig: Partial<IEngineConfig>): void;
    private handlePlayerMessage;
    private handleRoomEntered;
    private handlePlayerMove;
    getStatus(): object;
    createEntity(entityClass: new (...args: any[]) => BaseEntity, ...args: any[]): BaseEntity;
    removeEntity(entityId: string): boolean;
    getEntity(entityId: string): BaseEntity | undefined;
    getAllEntities(): BaseEntity[];
    getEntitiesByType(type: string): BaseEntity[];
    emitEvent(event: GameEvent): Promise<void>;
    on(eventType: string, handler: (event: GameEvent) => void): void;
    off(eventType: string, handler: (event: GameEvent) => void): void;
    registerPlugin(plugin: BasePlugin): void;
    registerSaveCommands(commandParser: any): void;
    registerDialogueCommands(commandParser: any): void;
    loadPlugin(pluginId: string): Promise<void>;
    unloadPlugin(pluginId: string): Promise<void>;
    getPlugin(pluginId: string): BasePlugin | undefined;
    getLoadedPlugins(): BasePlugin[];
    getTelnetServer(): TelnetServer | undefined;
    sendMessageToSession(sessionId: string, content: string, type?: 'system' | 'user' | 'error' | 'info' | 'broadcast'): boolean;
    broadcastMessage(content: string, type?: 'system' | 'user' | 'error' | 'info' | 'broadcast', excludeSessionId?: string): void;
    registerNetworkCommand(handler: any): void;
    unregisterNetworkCommand(command: string): boolean;
    getWorldManager(): WorldManager | undefined;
    getRoom(roomId: string): any;
    getAllRooms(): any[];
    getItem(itemId: string): any;
    getAllItems(): any[];
    getNPC(npcId: string): any;
    getAllNPCs(): any[];
    movePlayer(playerId: string, fromRoomId: string, toRoomId: string): boolean;
    getRoomDescription(roomId: string): string;
    findExit(roomId: string, direction: string): any;
    getPlayersInRoom(roomId: string): string[];
    getItemsInRoom(roomId: string): any[];
    getNPCsInRoom(roomId: string): any[];
    getSaveManager(): SaveManager | undefined;
    getDialogueManager(): DialogueManager | undefined;
    getPlayerManager(): PlayerManager | undefined;
    saveFullGame(description?: string): Promise<string | null>;
    loadFullGame(saveId: string): Promise<void>;
    listSaves(): Promise<any[]>;
    deleteSave(saveId: string): Promise<boolean>;
    cleanupOldBackups(): Promise<number>;
}
